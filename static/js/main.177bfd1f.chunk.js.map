{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["messages","allDaysLabel","editLabel","saveLabel","everyDay","dayNamesEnglish","DAYS","Object","freeze","reduce","acc","d","index","objectSpread","defineProperty","getDay","day","ALL_DAYS_SELECTED","map","createUniqueId","id","arguments","length","undefined","i","concat","makeUniqueIdGenerator","DEFAULT_TODOS","getTodos","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","store","wrap","_context","prev","next","localForage","getItem","sent","setItem","abrupt","t0","stop","this","apply","saveTodos","todos","DayPicker","_ref2","defaultSelectedDays","onSetSelectedDays","_useState","useState","_useState2","slicedToArray","selectedDays","setSelectedDays","isDaySelected","includes","allDaysChecked","every","syncDays","nextDays","toggleCheckDay","_ref3","target","value","filter","toConsumableArray","react_default","createElement","type","checked","onChange","Fragment","key","TODO_PLACEHOLDER","TodoForm","_ref4","cancel","todo","save","_ref4$defaultValue","defaultValue","_useState3","_useState4","setValue","_useState5","days","_useState6","onSubmit","e","preventDefault","text","autoFocus","className","placeholder","onClick","generateAriaLabelForTodo","_ref5","generateAriaLabelForEditTodoButton","_ref6","Todo","_ref7","toggleTodo","removeTodo","updateTodo","_useState7","_useState8","isEditing","setIsEditing","setNotEditing","update","style","textDecoration","isCompleted","aria-label","TodoList","_ref8","_ref8$defaultTodos","defaultTodos","_useState9","_useState10","setTodos","syncTodos","newTodos","splice","t","Array","isArray","padding","Fallback","TodoListWithDB","then","td","generateTodoList","Boolean","window","location","hostname","match","ReactDOM","render","react","fallback","App_Fallback","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.177bfd1f.chunk.js","sourcesContent":["import React, { Suspense, useState } from 'react';\nimport localForage from 'localforage';\nimport './App.css';\n\nfunction makeUniqueIdGenerator(id = '') {\n  let i = 0;\n  return function() {\n    i += 1;\n    return `${id}_${i}`;\n  };\n}\n\nexport const messages = {\n  allDaysLabel: 'All days of the week',\n  editLabel: 'Edit',\n  saveLabel: 'Save',\n};\n\nexport const everyDay = 'everyDay';\nexport const Monday = 'Monday';\nexport const Tuesday = 'Tuesday';\nexport const Wednesday = 'Wednesday';\nexport const Thursday = 'Thursday';\nexport const Friday = 'Friday';\nexport const Saturday = 'Saturday';\nexport const Sunday = 'Sunday';\nexport const dayNamesEnglish = [\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n  Sunday,\n];\nconst DAYS = Object.freeze(\n  dayNamesEnglish.reduce((acc, d, index) => ({ ...acc, [d]: index }), {})\n);\nconst getDay = day => DAYS[day];\nconst ALL_DAYS_SELECTED = dayNamesEnglish.map(getDay);\n\nconst createUniqueId = makeUniqueIdGenerator('todo');\n\nexport const createDefaultTodo = text => ({\n  id: createUniqueId(),\n  days: ALL_DAYS_SELECTED,\n  text,\n  isCompleted: false,\n});\nexport const DEFAULT_TODOS = [];\nexport const DB_TODOS_KEY = 'todos';\nexport const STORE_KEY = 'ticboxStore';\n\nconst getTodos = async () => {\n  try {\n    let store = await localForage.getItem(DB_TODOS_KEY);\n    if (!store) {\n      await localForage.setItem(DB_TODOS_KEY, DEFAULT_TODOS);\n      store = await localForage.getItem(DB_TODOS_KEY);\n    }\n    return store;\n  } catch (e) {}\n};\n\nconst saveTodos = todos => {\n  return localForage.setItem(DB_TODOS_KEY, todos);\n};\n\nfunction DayPicker({ defaultSelectedDays, onSetSelectedDays }) {\n  const [selectedDays, setSelectedDays] = useState(defaultSelectedDays);\n  const isDaySelected = day => selectedDays.includes(getDay(day));\n  const allDaysChecked = ALL_DAYS_SELECTED.every(day =>\n    selectedDays.includes(day)\n  );\n  function syncDays(nextDays) {\n    setSelectedDays(nextDays);\n    onSetSelectedDays(nextDays);\n  }\n  function toggleCheckDay({ target }) {\n    const day = DAYS[target.value];\n    let nextDays;\n    if (!isDaySelected(target.value)) {\n      nextDays = [...selectedDays, day];\n    } else {\n      nextDays = selectedDays.filter(d => d !== day);\n    }\n    syncDays(nextDays);\n  }\n  return (\n    <fieldset>\n      <legend>Day</legend>\n      <label>\n        <input\n          type=\"checkbox\"\n          value={everyDay}\n          checked={allDaysChecked}\n          onChange={() => syncDays(allDaysChecked ? [] : ALL_DAYS_SELECTED)}\n        />\n        {messages.allDaysLabel}\n      </label>\n      {!allDaysChecked && (\n        <>\n          &nbsp;—&nbsp;\n          {dayNamesEnglish.map(day => (\n            <label key={day}>\n              <input\n                type=\"checkbox\"\n                value={day}\n                checked={isDaySelected(day)}\n                onChange={toggleCheckDay}\n              />\n              {day}\n            </label>\n          ))}\n        </>\n      )}\n    </fieldset>\n  );\n}\n\nexport const TODO_PLACEHOLDER = 'Climb Mt Rainier';\n\nfunction TodoForm({ cancel, todo, save, defaultValue = '' }) {\n  const [value, setValue] = useState(defaultValue);\n  const [selectedDays, setSelectedDays] = useState(\n    todo ? todo.days : ALL_DAYS_SELECTED\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    save({\n      text: value,\n      days: selectedDays,\n    });\n    setValue('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Todo&nbsp;\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"input\"\n          placeholder={TODO_PLACEHOLDER}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n      </label>\n      {!!value && (\n        <DayPicker\n          defaultSelectedDays={selectedDays}\n          onSetSelectedDays={setSelectedDays}\n        />\n      )}\n      <button type=\"submit\">{messages.saveLabel}</button>\n      {!!defaultValue && <button onClick={cancel}>Cancel</button>}\n    </form>\n  );\n}\n\nexport const todoAriaLabelPart1 = 'Mark';\nexport const todoAriaLabelPart2 = 'as completed';\nexport const generateAriaLabelForTodo = ({ text }) =>\n  `${todoAriaLabelPart1} ${text} ${todoAriaLabelPart2}`;\nexport const generateAriaLabelForEditTodoButton = ({ text }) => `Edit ${text}`;\nfunction Todo({ todo, index, toggleTodo, removeTodo, updateTodo }) {\n  const [isEditing, setIsEditing] = useState(false);\n  const setEditing = () => setIsEditing(true);\n  const setNotEditing = () => setIsEditing(false);\n  if (isEditing) {\n    return (\n      <div>\n        <TodoForm\n          todo={todo}\n          save={update => {\n            updateTodo({\n              ...todo,\n              ...update,\n            });\n            setNotEditing();\n          }}\n          defaultValue={todo.text}\n          cancel={setNotEditing}\n        />\n      </div>\n    );\n  }\n  return (\n    <div\n      className=\"todo\"\n      style={{\n        textDecoration: todo.isCompleted ? 'line-through' : '',\n      }}\n    >\n      <input\n        aria-label={generateAriaLabelForTodo(todo)}\n        type=\"checkbox\"\n        checked={todo.isCompleted}\n        onChange={() => toggleTodo(index)}\n      />\n      {todo.text}\n\n      <div>\n        <button\n          aria-label={generateAriaLabelForEditTodoButton(todo)}\n          onClick={setEditing}\n        >\n          {messages.editLabel}\n        </button>\n        <button onClick={() => removeTodo(index)}>x</button>\n      </div>\n    </div>\n  );\n}\n\nexport function TodoList({ defaultTodos = [] }) {\n  const [todos, setTodos] = useState(defaultTodos);\n\n  const syncTodos = newTodos => {\n    setTodos(newTodos);\n    saveTodos(newTodos);\n  };\n\n  const addTodo = todo => {\n    const newTodos = [...todos, { id: createUniqueId(), ...todo }];\n    syncTodos(newTodos);\n  };\n\n  const toggleTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = !newTodos[index].isCompleted;\n    syncTodos(newTodos);\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    syncTodos(newTodos);\n  };\n\n  const updateTodo = todo => {\n    const newTodos = todos.map(t => (t.id === todo.id ? { ...t, ...todo } : t));\n    syncTodos(newTodos);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"todo-list\">\n        <ul>\n          {Array.isArray(todos) &&\n            todos.map((todo, index) => (\n              <li key={index} style={{ padding: 10 }}>\n                <Todo\n                  index={index}\n                  todo={todo}\n                  toggleTodo={toggleTodo}\n                  removeTodo={removeTodo}\n                  updateTodo={updateTodo}\n                />\n              </li>\n            ))}\n          <li style={{ padding: 20 }}>\n            <TodoForm save={addTodo} />\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nconst Fallback = () => <div>Loading...</div>;\n\nfunction generateTodoList() {\n  let todos;\n  return () => {\n    if (!todos) {\n      const promise = getTodos().then(td => {\n        todos = td;\n      });\n      throw promise;\n    }\n    return <TodoList defaultTodos={todos} />;\n  };\n}\n\nconst TodoListWithDB = generateTodoList();\n\nexport default function App() {\n  return (\n    <Suspense fallback={<Fallback />}>\n      <TodoListWithDB />\n    </Suspense>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}