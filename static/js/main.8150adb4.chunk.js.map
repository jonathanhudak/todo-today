{"version":3,"sources":["shared.js","app/DayPicker.js","app/TodoForm.js","app/TodoListItem.js","app/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_TODOS","DB_TODOS_KEY","everyDay","dayNamesEnglish","DAYS","Object","freeze","reduce","acc","d","index","objectSpread","defineProperty","getDay","day","ALL_DAYS_SELECTED","map","getTodos","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","store","wrap","_context","prev","next","localForage","getItem","sent","setItem","abrupt","t0","stop","this","apply","arguments","messages","allDaysLabel","DayPicker","defaultSelectedDays","onSetSelectedDays","_useState","useState","_useState2","slicedToArray","selectedDays","setSelectedDays","isDaySelected","includes","allDaysChecked","every","syncDays","nextDays","toggleCheckDay","_ref2","target","value","filter","concat","toConsumableArray","react_default","createElement","type","checked","onChange","key","editLabel","saveLabel","todoTextPlaceholder","TodoForm","cancel","todo","save","_ref$defaultValue","defaultValue","setValue","_useState3","days","_useState4","onSubmit","e","preventDefault","text","autoFocus","className","placeholder","onClick","deleteLabel","generateAriaLabelForTodo","generateAriaLabelForEditTodoButton","TodoListItem","_ref3","toggleTodo","removeTodo","updateTodo","isEditing","setIsEditing","setNotEditing","update","style","textDecoration","isCompleted","aria-label","TodoList","_ref$defaultTodos","defaultTodos","_useTodoList","generateId","length","undefined","todos","setTodos","useEffect","id","i","makeUniqueIdGenerator","newTodo","newTodos","splice","addTodo","useTodoList","todosResource","createResource","Fallback","LiveTodoList","read","Boolean","window","location","hostname","match","ReactDOM","render","react","fallback","App_Fallback","App_LiveTodoList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8150adb4.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport localForage from 'localforage';\n\n// Store\nexport const DEFAULT_TODOS = [];\nexport const DB_TODOS_KEY = 'todos';\n\n// Day Picker\nexport const everyDay = 'everyDay';\nexport const Monday = 'Monday';\nexport const Tuesday = 'Tuesday';\nexport const Wednesday = 'Wednesday';\nexport const Thursday = 'Thursday';\nexport const Friday = 'Friday';\nexport const Saturday = 'Saturday';\nexport const Sunday = 'Sunday';\nexport const dayNamesEnglish = [\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n  Sunday,\n];\nexport const DAYS = Object.freeze(\n  dayNamesEnglish.reduce((acc, d, index) => ({ ...acc, [d]: index }), {})\n);\nexport const getDay = day => DAYS[day];\nexport const ALL_DAYS_SELECTED = dayNamesEnglish.map(getDay);\n\n// Utils\nexport function makeUniqueIdGenerator(id = '', initialIndex = 0) {\n  let i = initialIndex;\n  return function() {\n    i += 1;\n    return `${id}_${i}`;\n  };\n}\n\nexport const getTodos = async () => {\n  try {\n    let store = await localForage.getItem(DB_TODOS_KEY);\n    if (!store) {\n      await localForage.setItem(DB_TODOS_KEY, DEFAULT_TODOS);\n      store = await localForage.getItem(DB_TODOS_KEY);\n    }\n    return store;\n  } catch (e) {}\n};\n\nexport function useTodoList(defaultTodos = []) {\n  let generateId;\n  const [todos, setTodos] = useState(defaultTodos);\n\n  useEffect(\n    () => {\n      localForage.setItem(DB_TODOS_KEY, todos);\n    },\n    [todos]\n  );\n\n  useEffect(() => {\n    generateId = makeUniqueIdGenerator('todo', defaultTodos.length - 1);\n  }, []);\n\n  const addTodo = todo => {\n    const newTodos = [...todos, { id: generateId(), ...todo }];\n    setTodos(newTodos);\n  };\n\n  const toggleTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = !newTodos[index].isCompleted;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  const updateTodo = newTodo => {\n    const newTodos = todos.map(todo => {\n      if (newTodo.id !== todo.id) return todo;\n      return { ...todo, ...newTodo };\n    });\n    setTodos(newTodos);\n  };\n\n  return {\n    todos,\n    updateTodo,\n    removeTodo,\n    toggleTodo,\n    addTodo,\n  };\n}\n","import React, { useState } from 'react';\nimport {\n  DAYS,\n  ALL_DAYS_SELECTED,\n  getDay,\n  dayNamesEnglish,\n  everyDay,\n} from 'shared';\n\nexport const messages = {\n  allDaysLabel: 'All days of the week',\n};\n\nexport default function DayPicker({ defaultSelectedDays, onSetSelectedDays }) {\n  const [selectedDays, setSelectedDays] = useState(defaultSelectedDays);\n  const isDaySelected = day => selectedDays.includes(getDay(day));\n  const allDaysChecked = ALL_DAYS_SELECTED.every(day =>\n    selectedDays.includes(day)\n  );\n  function syncDays(nextDays) {\n    setSelectedDays(nextDays);\n    onSetSelectedDays(nextDays);\n  }\n  function toggleCheckDay({ target }) {\n    const day = DAYS[target.value];\n    let nextDays;\n    if (!isDaySelected(target.value)) {\n      nextDays = [...selectedDays, day];\n    } else {\n      nextDays = selectedDays.filter(d => d !== day);\n    }\n    syncDays(nextDays);\n  }\n  return (\n    <fieldset>\n      <legend>Day</legend>\n      <label>\n        <input\n          type=\"checkbox\"\n          value={everyDay}\n          checked={allDaysChecked}\n          onChange={() => syncDays(allDaysChecked ? [] : ALL_DAYS_SELECTED)}\n        />\n        {messages.allDaysLabel}\n      </label>\n      &nbsp;—&nbsp;\n      {dayNamesEnglish.map(day => (\n        <label key={day}>\n          <input\n            type=\"checkbox\"\n            value={day}\n            checked={isDaySelected(day)}\n            onChange={toggleCheckDay}\n          />\n          {day}\n        </label>\n      ))}\n    </fieldset>\n  );\n}\n","import React, { useState } from 'react';\nimport { ALL_DAYS_SELECTED } from 'shared';\nimport DayPicker from 'app/DayPicker';\nexport const TODO_PLACEHOLDER = 'Climb Mt Rainier';\n\nexport const messages = {\n  editLabel: 'Edit',\n  saveLabel: 'Save',\n  todoTextPlaceholder: 'Climb Mt Rainier',\n};\n\nexport default function TodoForm({ cancel, todo, save, defaultValue = '' }) {\n  const [value, setValue] = useState(defaultValue);\n  const [selectedDays, setSelectedDays] = useState(\n    todo ? todo.days : ALL_DAYS_SELECTED\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    save({\n      text: value,\n      days: selectedDays,\n    });\n    setValue('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Todo&nbsp;\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"input\"\n          placeholder={messages.todoTextPlaceholder}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n      </label>\n      {!!value && (\n        <DayPicker\n          defaultSelectedDays={selectedDays}\n          onSetSelectedDays={setSelectedDays}\n        />\n      )}\n      <button type=\"submit\">{messages.saveLabel}</button>\n      {!!defaultValue && <button onClick={cancel}>Cancel</button>}\n    </form>\n  );\n}\n","import React, { useState } from 'react';\nimport TodoForm from 'app/TodoForm';\n\nexport const messages = {\n  editLabel: 'Edit',\n  deleteLabel: 'Remove',\n};\n\nexport const todoAriaLabelPart1 = 'Mark';\nexport const todoAriaLabelPart2 = 'as completed';\nexport const generateAriaLabelForTodo = ({ text }) =>\n  `${todoAriaLabelPart1} ${text} ${todoAriaLabelPart2}`;\nexport const generateAriaLabelForEditTodoButton = ({ text }) => `Edit ${text}`;\n\nexport default function TodoListItem({\n  todo,\n  index,\n  toggleTodo,\n  removeTodo,\n  updateTodo,\n}) {\n  const [isEditing, setIsEditing] = useState(false);\n  const setEditing = () => setIsEditing(true);\n  const setNotEditing = () => setIsEditing(false);\n  if (isEditing) {\n    return (\n      <TodoForm\n        todo={todo}\n        save={update => {\n          updateTodo({\n            ...todo,\n            ...update,\n          });\n          setNotEditing();\n        }}\n        defaultValue={todo.text}\n        cancel={setNotEditing}\n      />\n    );\n  }\n  return (\n    <div\n      style={{\n        textDecoration: todo.isCompleted ? 'line-through' : '',\n      }}\n    >\n      <input\n        aria-label={generateAriaLabelForTodo(todo)}\n        type=\"checkbox\"\n        checked={todo.isCompleted}\n        onChange={() => toggleTodo(index)}\n      />\n      {todo.text}\n\n      <div>\n        <button\n          aria-label={generateAriaLabelForEditTodoButton(todo)}\n          onClick={setEditing}\n        >\n          {messages.editLabel}\n        </button>\n        <button onClick={() => removeTodo(index)}>\n          {messages.deleteLabel}\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport TodoForm from 'app/TodoForm';\nimport TodoListItem from 'app/TodoListItem';\nimport { useTodoList } from 'shared';\n\nexport default function TodoList({ defaultTodos = [] }) {\n  const { todos, addTodo, toggleTodo, removeTodo, updateTodo } = useTodoList(\n    defaultTodos\n  );\n\n  return (\n    <div>\n      <div>\n        <ul>\n          {todos.map((todo, index) => (\n            <li key={index}>\n              <TodoListItem\n                index={index}\n                todo={todo}\n                toggleTodo={toggleTodo}\n                removeTodo={removeTodo}\n                updateTodo={updateTodo}\n              />\n            </li>\n          ))}\n          <li>\n            <TodoForm save={addTodo} />\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import React, { Suspense } from 'react';\nimport { getTodos } from 'shared';\nimport { unstable_createResource as createResource } from 'react-cache';\nimport TodoList from 'app/TodoList';\n\nconst todosResource = createResource(getTodos);\n\nconst Fallback = () => <div>Loading...</div>;\n\nconst LiveTodoList = () => {\n  const todos = todosResource.read();\n  return <TodoList defaultTodos={todos} />;\n};\n\nexport default function App() {\n  return (\n    <Suspense fallback={<Fallback />}>\n      <LiveTodoList />\n    </Suspense>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}