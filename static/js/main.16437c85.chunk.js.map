{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["everyDay","days","DAYS","Object","freeze","reduce","acc","d","index","objectSpread","defineProperty","getDay","day","ALL_DAYS_SELECTED","map","createUniqueId","id","arguments","length","undefined","i","concat","makeUniqueIdGenerator","DEFAULT_STATE","todos","text","isCompleted","history","STORE_KEY","getStoreData","store","JSON","parse","e","getStore","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","localForage","getItem","sent","setItem","stringify","then","console","log","abrupt","stop","this","apply","database","setStore","storeUpdate","currentStore","DayPicker","_ref2","defaultSelectedDays","onSetSelectedDays","_useState","useState","_useState2","slicedToArray","selectedDays","setSelectedDays","isDaySelected","includes","allDaysChecked","syncDays","nextDays","toggleCheckDay","_ref3","target","value","filter","toConsumableArray","react_default","createElement","type","checked","onChange","Fragment","key","TodoForm","_ref4","cancel","todo","save","_ref4$defaultValue","defaultValue","_useState3","_useState4","setValue","_useState5","_useState6","onSubmit","preventDefault","className","placeholder","onClick","Todo","_ref5","toggleTodo","removeTodo","updateTodo","_useState7","_useState8","isEditing","setIsEditing","setNotEditing","update","style","textDecoration","TodoList","s","db","_useState9","_useState10","setTodos","syncTodos","newTodos","splice","t","Array","isArray","padding","Fallback","Boolean","window","location","hostname","match","ReactDOM","render","react","fallback","App_Fallback","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16437c85.chunk.js","sourcesContent":["import React, { Suspense, useState } from \"react\";\nimport localForage from \"localforage\";\nimport \"./App.css\";\n\nfunction makeUniqueIdGenerator(id = \"\") {\n  let i = 0;\n  return function() {\n    i += 1;\n    return `${id}_${i}`;\n  };\n}\n\nconst everyDay = \"everyDay\";\nconst days = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\"\n];\nconst DAYS = Object.freeze(\n  days.reduce((acc, d, index) => ({ ...acc, [d]: index }), {})\n);\nconst getDay = day => DAYS[day];\nconst ALL_DAYS_SELECTED = days.map(getDay);\n\nconst createUniqueId = makeUniqueIdGenerator(\"todo\");\n\nconst DEFAULT_TODOS = [\n  {\n    id: createUniqueId(),\n    days: ALL_DAYS_SELECTED,\n    text: \"doodle\",\n    isCompleted: false\n  },\n  {\n    id: createUniqueId(),\n    days: ALL_DAYS_SELECTED,\n    text: \"60 push ups\",\n    isCompleted: false\n  },\n  {\n    id: createUniqueId(),\n    days: ALL_DAYS_SELECTED,\n    text: \"100 Russian Twists\",\n    isCompleted: false\n  }\n];\n\nconst DEFAULT_STATE = {\n  todos: DEFAULT_TODOS,\n  history: {}\n};\n\nconst STORE_KEY = \"ticboxStore\";\nconst getStoreData = store => {\n  try {\n    if (typeof store === \"string\") {\n      return JSON.parse(store);\n    }\n    return store;\n  } catch (e) {}\n};\n\nconst getStore = async () => {\n  const store = await localForage.getItem(STORE_KEY);\n  if (!store) {\n    await localForage\n      .setItem(STORE_KEY, JSON.stringify(DEFAULT_STATE))\n      .then(console.log);\n    return DEFAULT_STATE;\n  }\n  return getStoreData(store);\n};\n\nfunction hydrateDatabase() {\n  return getStore().then(store => {\n    if (!store) {\n      return localForage\n        .setItem(STORE_KEY, JSON.stringify(DEFAULT_STATE))\n        .then(s => {\n          return getStoreData(s);\n        });\n    }\n    return getStoreData(store);\n  });\n}\n\nconst setStore = storeUpdate => {\n  const currentStore = getStoreData(getStore());\n  localForage.setItem(\n    STORE_KEY,\n    JSON.stringify({\n      ...currentStore,\n      ...storeUpdate\n    })\n  );\n};\n\nfunction DayPicker({ defaultSelectedDays, onSetSelectedDays }) {\n  const [selectedDays, setSelectedDays] = useState(defaultSelectedDays);\n  const isDaySelected = day => selectedDays.includes(getDay(day));\n  const allDaysChecked = selectedDays === ALL_DAYS_SELECTED;\n  function syncDays(nextDays) {\n    setSelectedDays(nextDays);\n    onSetSelectedDays(nextDays);\n  }\n  function toggleCheckDay({ target }) {\n    const day = DAYS[target.value];\n    let nextDays;\n    if (!isDaySelected(day)) {\n      nextDays = [...selectedDays, day];\n    } else {\n      nextDays = selectedDays.filter(d => d !== day);\n    }\n    syncDays(nextDays);\n  }\n  return (\n    <fieldset>\n      <legend>Day</legend>\n      <label>\n        <input\n          type=\"checkbox\"\n          value={everyDay}\n          checked={allDaysChecked}\n          onChange={() => syncDays(allDaysChecked ? [] : ALL_DAYS_SELECTED)}\n        />\n        All days of the week\n      </label>\n      {!allDaysChecked && (\n        <>\n          &nbsp;—&nbsp;\n          {days.map(day => (\n            <label key={day}>\n              <input\n                type=\"checkbox\"\n                value={day}\n                checked={isDaySelected(day)}\n                onChange={toggleCheckDay}\n              />\n              {day}\n            </label>\n          ))}\n        </>\n      )}\n    </fieldset>\n  );\n}\n\nfunction TodoForm({ cancel, todo, save, defaultValue = \"\" }) {\n  const [value, setValue] = useState(defaultValue);\n  const [selectedDays, setSelectedDays] = useState(\n    todo ? todo.days : ALL_DAYS_SELECTED\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    save({\n      text: value,\n      days: selectedDays\n    });\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Todo&nbsp;\n        <input\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Climb Mt Rainier\"\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n      </label>\n      {!!value && (\n        <DayPicker\n          defaultSelectedDays={selectedDays}\n          onSetSelectedDays={setSelectedDays}\n        />\n      )}\n      <button type=\"submit\">Save</button>\n      <button onClick={cancel}>Cancel</button>\n    </form>\n  );\n}\n\nfunction Todo({ todo, index, toggleTodo, removeTodo, updateTodo }) {\n  const [isEditing, setIsEditing] = useState(false);\n  const setEditing = () => setIsEditing(true);\n  const setNotEditing = () => setIsEditing(false);\n  if (isEditing) {\n    return (\n      <div>\n        <TodoForm\n          todo={todo}\n          save={update => {\n            updateTodo({\n              ...todo,\n              ...update\n            });\n            setNotEditing();\n          }}\n          defaultValue={todo.text}\n          cancel={setNotEditing}\n        />\n      </div>\n    );\n  }\n  return (\n    <div\n      className=\"todo\"\n      style={{\n        textDecoration: todo.isCompleted ? \"line-through\" : \"\"\n      }}\n    >\n      <input\n        type=\"checkbox\"\n        checked={todo.isCompleted}\n        onChange={() => toggleTodo(index)}\n      />\n      {todo.text}\n\n      <div>\n        <button onClick={setEditing}>Edit</button>\n        <button onClick={() => removeTodo(index)}>x</button>\n      </div>\n    </div>\n  );\n}\n\nlet database;\n\nfunction TodoList() {\n  if (!database) {\n    const promise = hydrateDatabase().then(db => (database = db));\n    throw promise;\n  }\n  const [todos, setTodos] = useState(database.todos);\n\n  const syncTodos = newTodos => {\n    setTodos(newTodos);\n    setStore({\n      todos: newTodos\n    });\n  };\n\n  const addTodo = todo => {\n    const newTodos = [...todos, { id: createUniqueId(), ...todo }];\n    syncTodos(newTodos);\n  };\n\n  const toggleTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = !newTodos[index].isCompleted;\n    syncTodos(newTodos);\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    syncTodos(newTodos);\n  };\n\n  const updateTodo = todo => {\n    const newTodos = todos.map(t => (t.id === todo.id ? { ...t, ...todo } : t));\n    syncTodos(newTodos);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"todo-list\">\n        {Array.isArray(todos) &&\n          todos.map((todo, index) => (\n            <div key={index} style={{ padding: 20 }}>\n              <Todo\n                index={index}\n                todo={todo}\n                toggleTodo={toggleTodo}\n                removeTodo={removeTodo}\n                updateTodo={updateTodo}\n              />\n            </div>\n          ))}\n        <div style={{ padding: 20 }}>\n          <TodoForm save={addTodo} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst Fallback = () => <div>Loading...</div>;\n\nexport default function App() {\n  return (\n    <Suspense fallback={<Fallback />}>\n      <TodoList />\n    </Suspense>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}