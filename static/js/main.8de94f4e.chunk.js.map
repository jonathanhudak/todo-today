{"version":3,"sources":["app/Providers.js","shared/index.js","app/DayPicker.js","app/TodoForm.js","app/TodoListItem.js","app/DayBrowser.js","shared/useDayBrowser.js","app/TodoList.js","shared/useTodoHistory.js","App.js","serviceWorker.js","index.js"],"names":["Store","createContext","reducer","oldState","newState","Object","objectSpread","StoreProvider","_ref","children","currentDay","_useReducer","useReducer","moment","_useReducer2","slicedToArray","store","state","setState","react_default","a","createElement","Provider","value","AppProviders","_ref2","restProps","objectWithoutProperties","DEFAULT_TODOS","DB_TODOS_KEY","DB_TODOS_HISTORY_KEY","everyDay","dayNamesEnglish","DAYS","freeze","reduce","acc","d","index","defineProperty","getDay","day","ALL_DAYS_SELECTED","map","getTodoHistory","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","localForage","getItem","sent","setItem","abrupt","t0","stop","this","apply","arguments","formatDate","date","parsedDate","year","month","concat","useGlobalState","useContext","getTodos","_callee2","_context2","useFilters","filters","length","undefined","_useState","useState","_useState2","currentFilters","setFilters","isFilterActive","name","includes","toggleFilter","filter","f","removeFilter","toConsumableArray","addFilter","keys","getTodoFilters","today","_ref3","days","generateTodayFilter","messages","allDaysLabel","DayPicker","defaultSelectedDays","onSetSelectedDays","selectedDays","setSelectedDays","isDaySelected","allDaysChecked","every","syncDays","nextDays","toggleCheckDay","target","type","checked","onChange","key","editLabel","saveLabel","todoTextPlaceholder","TodoForm","cancel","todo","save","_ref$defaultValue","defaultValue","setValue","_useState3","_useState4","onSubmit","e","preventDefault","text","autoFocus","className","placeholder","onClick","deleteLabel","generateAriaLabelForDeleteButton","generateAriaLabelForTodo","generateAriaLabelForEditTodoButton","TodoListItem","_ref4","isCompleted","toggleTodo","removeTodo","updateTodo","isEditing","setIsEditing","setNotEditing","update","style","textDecoration","aria-label","DayBrowser","_useDayBrowser","_useGlobalState","setDay","goToNextDay","add","goToPreviousDay","subtract","goToToday","useDayBrowser","format","TodoList","_ref$defaultTodos","defaultTodos","defaultHistory","defaultDay","_useTodoList","todos","setTodos","getFilters","get","_useFilters","filterProps","activeFilters","k","filteredTodos","t","useEffect","allTodos","newTodo","newTodos","id","todoId","addTodo","generateId","i","makeUniqueIdGenerator","useTodoList","_useTodoHistory","lastHistory","history","setHistory","isEqual","isEmpty","getDayHistory","isCompletedForDay","toggleTodoForDay","existingDayHistory","nextTodoHistory","nextHistory","useTodoHistory","isTodoCompleted","background","padding","float","JSON","stringify","todosResource","createResource","todosHistoryResource","Fallback","LiveTodoList","read","Boolean","window","location","hostname","match","ReactDOM","render","react","fallback","App_Fallback","App_LiveTodoList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8de94f4e.chunk.js","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\n\nexport const Store = createContext();\nconst reducer = (oldState, newState) => ({ ...oldState, ...newState });\n\nfunction StoreProvider({ children, currentDay }) {\n  const [state, setState] = useReducer(reducer, {\n    currentDay: currentDay || moment(),\n  });\n  const store = { state, setState };\n  return <Store.Provider value={store}>{children}</Store.Provider>;\n}\n\nexport default function AppProviders({ children, ...restProps }) {\n  return <StoreProvider {...restProps}>{children}</StoreProvider>;\n}\n\nAppProviders.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import { useEffect, useState, useContext } from 'react';\nimport localForage from 'localforage';\nimport { Store } from 'app/Providers';\nimport moment from 'moment';\n\n// Store\nexport const DEFAULT_TODOS = [];\nexport const DB_TODOS_KEY = 'todos';\nexport const DB_TODOS_HISTORY_KEY = 'history';\n\n// Day Picker\nexport const everyDay = 'everyDay';\nexport const Monday = 'Monday';\nexport const Tuesday = 'Tuesday';\nexport const Wednesday = 'Wednesday';\nexport const Thursday = 'Thursday';\nexport const Friday = 'Friday';\nexport const Saturday = 'Saturday';\nexport const Sunday = 'Sunday';\nexport const dayNamesEnglish = [\n  Sunday,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n];\nexport const DAYS = Object.freeze(\n  dayNamesEnglish.reduce((acc, d, index) => ({ ...acc, [d]: index }), {})\n);\nexport const getDay = day => DAYS[day];\nexport const ALL_DAYS_SELECTED = dayNamesEnglish.map(getDay);\n\n// Utils\nexport function makeUniqueIdGenerator(id = '', initialIndex = 0) {\n  let i = initialIndex;\n  return function() {\n    i += 1;\n    return `${id}_${i}`;\n  };\n}\n\nexport const getTodoHistory = async () => {\n  try {\n    const store = await localForage.getItem(DB_TODOS_HISTORY_KEY);\n    if (!store) {\n      await localForage.setItem(DB_TODOS_HISTORY_KEY, {});\n      return {};\n    }\n    return store;\n  } catch (e) {}\n};\n\nexport function formatDate(date) {\n  const parsedDate = moment(date);\n  const year = parsedDate.year();\n  const month = parsedDate.month();\n  const day = parsedDate.date();\n  return `${month}-${day}-${year}`;\n}\n\nexport function useGlobalState() {\n  return useContext(Store);\n}\n\nexport const getTodos = async () => {\n  try {\n    const store = await localForage.getItem(DB_TODOS_KEY);\n    if (!store) {\n      await localForage.setItem(DB_TODOS_KEY, DEFAULT_TODOS);\n      return DEFAULT_TODOS;\n    }\n    return store;\n  } catch (e) {}\n};\n\nexport function useFilters(filters = {}) {\n  const [currentFilters, setFilters] = useState(filters);\n\n  const addFilter = name => setFilters([...currentFilters, name]);\n  const removeFilter = name =>\n    setFilters(currentFilters.filter(f => f !== name));\n  const isFilterActive = name => currentFilters.includes(name);\n  const toggleFilter = name =>\n    isFilterActive(name) ? removeFilter(name) : addFilter(name);\n\n  return {\n    filters,\n    currentFilters,\n    isFilterActive,\n    toggleFilter,\n    setFilters: filters => setFilters(Object.keys(filters)),\n  };\n}\n\nexport const generateTodayFilter = (today = moment().day()) => ({ days }) => {\n  return days.includes(today);\n};\n\nconst Day = 'Day';\n\n// export const filterMoreRecentTodos = ({ createdAt }) =>\nexport const requiredFilters = day => [];\nexport const getTodoFilters = ({ day } = {}) => {\n  return {\n    [Day]: generateTodayFilter(day),\n  };\n};\n\nexport function useTodoList(defaultTodos = [], day = moment()) {\n  const [todos, setTodos] = useState(defaultTodos);\n  const getFilters = () => getTodoFilters({ day: day.get('day') });\n  const { currentFilters, setFilters, ...filterProps } = useFilters(\n    Object.keys(getFilters())\n  );\n\n  const activeFilters = [...currentFilters.map(k => getFilters()[k])];\n  const filteredTodos = todos.filter(t => activeFilters.every(f => f(t)));\n\n  useEffect(\n    () => {\n      localForage.setItem(DB_TODOS_KEY, todos);\n    },\n    [todos]\n  );\n\n  const addTodo = todo => {\n    const generateId = makeUniqueIdGenerator('todo', todos.length);\n    const newTodos = [...todos, { id: generateId(), ...todo }];\n    setTodos(newTodos);\n  };\n\n  const toggleTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = !newTodos[index].isCompleted;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = todoId => {\n    setTodos(todos.filter(id => id !== todoId));\n  };\n\n  const updateTodo = newTodo => {\n    const newTodos = todos.map(todo => {\n      if (newTodo.id !== todo.id) return todo;\n      return { ...todo, ...newTodo };\n    });\n    setTodos(newTodos);\n  };\n\n  return {\n    todos: filteredTodos,\n    allTodos: todos,\n    updateTodo,\n    removeTodo,\n    toggleTodo,\n    addTodo,\n    ...filterProps,\n  };\n}\n\nexport { useDayBrowser } from './useDayBrowser';\nexport { useTodoHistory } from './useTodoHistory';\n","import React, { useState } from 'react';\nimport {\n  DAYS,\n  ALL_DAYS_SELECTED,\n  getDay,\n  dayNamesEnglish,\n  everyDay,\n} from 'shared';\n\nexport const messages = {\n  allDaysLabel: 'All days of the week',\n};\n\nexport default function DayPicker({ defaultSelectedDays, onSetSelectedDays }) {\n  const [selectedDays, setSelectedDays] = useState(defaultSelectedDays);\n  const isDaySelected = day => selectedDays.includes(getDay(day));\n  const allDaysChecked = ALL_DAYS_SELECTED.every(day =>\n    selectedDays.includes(day)\n  );\n  function syncDays(nextDays) {\n    setSelectedDays(nextDays);\n    onSetSelectedDays(nextDays);\n  }\n  function toggleCheckDay({ target }) {\n    const day = DAYS[target.value];\n    let nextDays;\n    if (!isDaySelected(target.value)) {\n      nextDays = [...selectedDays, day];\n    } else {\n      nextDays = selectedDays.filter(d => d !== day);\n    }\n    syncDays(nextDays);\n  }\n  return (\n    <fieldset>\n      <legend>Day</legend>\n      <label>\n        <input\n          type=\"checkbox\"\n          value={everyDay}\n          checked={allDaysChecked}\n          onChange={() => syncDays(allDaysChecked ? [] : ALL_DAYS_SELECTED)}\n        />\n        {messages.allDaysLabel}\n      </label>\n      &nbsp;—&nbsp;\n      {dayNamesEnglish.map(day => (\n        <label key={day}>\n          <input\n            type=\"checkbox\"\n            value={day}\n            checked={isDaySelected(day)}\n            onChange={toggleCheckDay}\n          />\n          {day}\n        </label>\n      ))}\n    </fieldset>\n  );\n}\n","import React, { useState } from 'react';\nimport { ALL_DAYS_SELECTED } from 'shared';\nimport DayPicker from 'app/DayPicker';\nexport const TODO_PLACEHOLDER = 'Climb Mt Rainier';\n\nexport const messages = {\n  editLabel: 'Edit',\n  saveLabel: 'Save',\n  todoTextPlaceholder: 'Climb Mt Rainier',\n};\n\nexport default function TodoForm({ cancel, todo, save, defaultValue = '' }) {\n  const [value, setValue] = useState(defaultValue);\n  const [selectedDays, setSelectedDays] = useState(\n    todo ? todo.days : ALL_DAYS_SELECTED\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    save({\n      text: value,\n      days: selectedDays,\n    });\n    setValue('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Todo&nbsp;\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"input\"\n          placeholder={messages.todoTextPlaceholder}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n      </label>\n      {!!value && (\n        <DayPicker\n          defaultSelectedDays={selectedDays}\n          onSetSelectedDays={setSelectedDays}\n        />\n      )}\n      <button type=\"submit\">{messages.saveLabel}</button>\n      {!!defaultValue && <button onClick={cancel}>Cancel</button>}\n    </form>\n  );\n}\n","import React, { useState } from 'react';\nimport TodoForm from 'app/TodoForm';\n\nexport const messages = {\n  editLabel: 'Edit',\n  deleteLabel: 'Remove',\n};\n\nexport const generateAriaLabelForDeleteButton = ({ text }) =>\n  `${messages.deleteLabel} ${text}`;\n\nexport const todoAriaLabelPart1 = 'Mark';\nexport const todoAriaLabelPart2 = 'as completed';\nexport const generateAriaLabelForTodo = ({ text }) =>\n  `${todoAriaLabelPart1} ${text} ${todoAriaLabelPart2}`;\nexport const generateAriaLabelForEditTodoButton = ({ text }) => `Edit ${text}`;\n\nexport default function TodoListItem({\n  isCompleted,\n  todo,\n  toggleTodo,\n  removeTodo,\n  updateTodo,\n}) {\n  const [isEditing, setIsEditing] = useState(false);\n  const setEditing = () => setIsEditing(true);\n  const setNotEditing = () => setIsEditing(false);\n  if (isEditing) {\n    return (\n      <TodoForm\n        todo={todo}\n        save={update => {\n          updateTodo({\n            ...todo,\n            ...update,\n          });\n          setNotEditing();\n        }}\n        defaultValue={todo.text}\n        cancel={setNotEditing}\n      />\n    );\n  }\n  return (\n    <div\n      style={{\n        textDecoration: isCompleted ? 'line-through' : '',\n      }}\n    >\n      <input\n        aria-label={generateAriaLabelForTodo(todo)}\n        type=\"checkbox\"\n        checked={isCompleted}\n        onChange={toggleTodo}\n      />\n      {todo.text}\n\n      <div>\n        <button\n          aria-label={generateAriaLabelForEditTodoButton(todo)}\n          onClick={setEditing}\n        >\n          {messages.editLabel}\n        </button>\n        <button\n          aria-label={generateAriaLabelForDeleteButton(todo)}\n          onClick={() => removeTodo(todo)}\n        >\n          {messages.deleteLabel}\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useGlobalState, useDayBrowser } from 'shared';\n\nexport default function DayBrowser() {\n  const { state } = useGlobalState();\n  const { currentDay } = state;\n  const { goToNextDay, goToPreviousDay, goToToday } = useDayBrowser();\n  return (\n    <div>\n      <button onClick={goToPreviousDay}>Prev</button>\n      <button onClick={goToToday}>Today</button>\n      {currentDay.format('dddd, MMMM Do YYYY')}\n      <button onClick={goToNextDay}>Next</button>\n    </div>\n  );\n}\n","import moment from 'moment';\nimport { useGlobalState } from 'shared';\n\nexport function useDayBrowser(defaultDay = moment()) {\n  const { state, setState } = useGlobalState();\n  const { currentDay } = state;\n  const setDay = day => setState({ currentDay: day });\n  const goToNextDay = () => setDay(currentDay.add(1, 'day'));\n  const goToPreviousDay = () => setDay(currentDay.subtract(1, 'day'));\n  const goToToday = () => setDay(moment());\n  return {\n    goToNextDay,\n    goToPreviousDay,\n    goToToday,\n  };\n}\n","import React from 'react';\nimport TodoForm from 'app/TodoForm';\nimport TodoListItem from 'app/TodoListItem';\nimport { useTodoList, useTodoHistory } from 'shared';\nimport DayBrowser from 'app/DayBrowser';\nimport { useGlobalState } from 'shared';\n\nexport default function TodoList({\n  defaultTodos = [],\n  defaultHistory,\n  defaultDay,\n}) {\n  const { state } = useGlobalState();\n  const { currentDay } = state;\n  const {\n    allTodos,\n    todos,\n    filters,\n    toggleFilter,\n    isFilterActive,\n    addTodo,\n    removeTodo,\n    updateTodo,\n  } = useTodoList(defaultTodos, currentDay);\n  const { history, toggleTodoForDay, isCompletedForDay } = useTodoHistory(\n    defaultHistory\n  );\n  const isTodoCompleted = ({ id }) => isCompletedForDay(id, currentDay);\n\n  return (\n    <div>\n      <DayBrowser />\n      <div>\n        Filters\n        {filters.map(name => (\n          <label key={name}>\n            {name}\n            <input\n              type=\"checkbox\"\n              checked={isFilterActive(name)}\n              onChange={() => toggleFilter(name)}\n            />\n          </label>\n        ))}\n        <ul>\n          {todos.map((todo, index) => (\n            <li key={index}>\n              <TodoListItem\n                index={index}\n                todo={todo}\n                isCompleted={isTodoCompleted(todo)}\n                toggleTodo={() => toggleTodoForDay(todo.id, currentDay)}\n                removeTodo={removeTodo}\n                updateTodo={updateTodo}\n              />\n            </li>\n          ))}\n          <li>\n            <TodoForm save={addTodo} />\n          </li>\n        </ul>\n        <div style={{ background: 'lavender', padding: 20, float: 'right' }}>\n          <pre>todos: {JSON.stringify(allTodos, null, 2)}</pre>\n          <pre>history: {JSON.stringify(history, null, 2)}</pre>\n          <pre>state: {JSON.stringify(state, null, 2)}</pre>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport localForage from 'localforage';\nimport { DB_TODOS_HISTORY_KEY, formatDate } from 'shared';\n\nexport function useTodoHistory(defaultHistory = {}) {\n  let lastHistory = defaultHistory;\n  const [history, setHistory] = useState(defaultHistory);\n\n  useEffect(() => {\n    if (!isEqual(lastHistory, history) && !isEmpty(history)) {\n      localForage.setItem(DB_TODOS_HISTORY_KEY, history);\n    }\n  });\n\n  const getDayHistory = date => history[date] || [];\n  const isCompletedForDay = (todoId, day) =>\n    getDayHistory(formatDate(day)).includes(todoId);\n\n  const toggleTodoForDay = (todoId, day) => {\n    const date = formatDate(day);\n    if (!date) return;\n    const existingDayHistory = getDayHistory(date);\n    const isCompletedForDay = existingDayHistory.includes(todoId);\n    const nextTodoHistory = isCompletedForDay\n      ? existingDayHistory.filter(t => t !== todoId)\n      : [...existingDayHistory, todoId];\n    const nextHistory = {\n      ...history,\n      [date]: nextTodoHistory,\n    };\n    lastHistory = nextHistory;\n    setHistory(nextHistory);\n  };\n\n  return {\n    history,\n    isCompletedForDay,\n    toggleTodoForDay,\n  };\n}\n","import React, { Suspense } from 'react';\nimport { getTodos, getTodoHistory } from 'shared';\nimport AppProviders from 'app/Providers';\nimport { unstable_createResource as createResource } from 'react-cache';\nimport TodoList from 'app/TodoList';\n\nconst todosResource = createResource(getTodos);\nconst todosHistoryResource = createResource(getTodoHistory);\n\nconst Fallback = () => <div>Loading...</div>;\n\nconst LiveTodoList = () => {\n  const todos = todosResource.read();\n  const history = todosHistoryResource.read();\n  return <TodoList defaultTodos={todos} defaultHistory={history} />;\n};\n\nexport default function App() {\n  return (\n    <AppProviders>\n      <Suspense fallback={<Fallback />}>\n        <LiveTodoList />\n      </Suspense>\n    </AppProviders>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}