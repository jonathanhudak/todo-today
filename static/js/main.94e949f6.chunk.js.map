{"version":3,"sources":["app/Providers.js","shared/index.js","app/DayPicker.js","app/TodoForm.js","app/TodoListItem.js","app/DayBrowser.js","shared/useDayBrowser.js","app/TodoList.js","shared/useTodoHistory.js","App.js","serviceWorker.js","index.js"],"names":["Store","createContext","reducer","oldState","newState","Object","objectSpread","StoreProvider","_ref","children","_useReducer","useReducer","currentDay","moment","_useReducer2","slicedToArray","store","state","setState","react_default","a","createElement","Provider","value","AppProviders","_ref2","DEFAULT_TODOS","DB_TODOS_KEY","DB_TODOS_HISTORY_KEY","everyDay","dayNamesEnglish","DAYS","freeze","reduce","acc","d","index","defineProperty","getDay","day","ALL_DAYS_SELECTED","map","getTodoHistory","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","localForage","setItem","getItem","sent","abrupt","t0","stop","this","apply","arguments","formatDate","date","parsedDate","year","month","concat","useGlobalState","useContext","getTodos","_callee2","_context2","useFilters","filters","length","undefined","_useState","useState","_useState2","currentFilters","setFilters","isFilterActive","name","includes","toggleFilter","filter","f","removeFilter","toConsumableArray","addFilter","keys","requiredFilters","getTodoFilters","today","_ref3","days","Date","messages","allDaysLabel","DayPicker","defaultSelectedDays","onSetSelectedDays","selectedDays","setSelectedDays","isDaySelected","allDaysChecked","every","syncDays","nextDays","toggleCheckDay","target","type","checked","onChange","key","editLabel","saveLabel","todoTextPlaceholder","TodoForm","cancel","todo","save","_ref$defaultValue","defaultValue","setValue","_useState3","_useState4","onSubmit","e","preventDefault","text","autoFocus","className","placeholder","onClick","deleteLabel","generateAriaLabelForDeleteButton","generateAriaLabelForTodo","generateAriaLabelForEditTodoButton","TodoListItem","_ref4","isCompleted","toggleTodo","removeTodo","updateTodo","isEditing","setIsEditing","setNotEditing","update","style","textDecoration","aria-label","DayBrowser","_useDayBrowser","_useGlobalState","setDay","goToNextDay","add","goToPreviousDay","subtract","goToToday","useDayBrowser","format","TodoList","_ref$defaultTodos","defaultTodos","defaultHistory","defaultDay","_useTodoList","generateId","id","i","makeUniqueIdGenerator","todos","setTodos","get","_useFilters","filterProps","objectWithoutProperties","activeFilters","k","filteredTodos","t","useEffect","newTodo","newTodos","todoId","addTodo","useTodoList","_useTodoHistory","lastHistory","history","setHistory","isEqual","getDayHistory","isCompletedForDay","toggleTodoForDay","existingDayHistory","nextTodoHistory","nextHistory","useTodoHistory","isTodoCompleted","JSON","stringify","todosResource","createResource","todosHistoryResource","Fallback","LiveTodoList","read","Boolean","window","location","hostname","match","ReactDOM","render","react","fallback","App_Fallback","App_LiveTodoList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94e949f6.chunk.js","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\n\nexport const Store = createContext();\nconst reducer = (oldState, newState) => ({ ...oldState, ...newState });\n\nfunction StoreProvider({ children }) {\n  const [state, setState] = useReducer(reducer, { currentDay: moment() });\n  const store = { state, setState };\n  return <Store.Provider value={store}>{children}</Store.Provider>;\n}\n\nexport default function AppProviders({ children }) {\n  return <StoreProvider>{children}</StoreProvider>;\n}\n\nAppProviders.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import { useEffect, useState, useContext } from 'react';\nimport localForage from 'localforage';\nimport { Store } from 'app/Providers';\nimport moment from 'moment';\n\n// Store\nexport const DEFAULT_TODOS = [];\nexport const DB_TODOS_KEY = 'todos';\nexport const DB_TODOS_HISTORY_KEY = 'history';\n\n// Day Picker\nexport const everyDay = 'everyDay';\nexport const Monday = 'Monday';\nexport const Tuesday = 'Tuesday';\nexport const Wednesday = 'Wednesday';\nexport const Thursday = 'Thursday';\nexport const Friday = 'Friday';\nexport const Saturday = 'Saturday';\nexport const Sunday = 'Sunday';\nexport const dayNamesEnglish = [\n  Sunday,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n];\nexport const DAYS = Object.freeze(\n  dayNamesEnglish.reduce((acc, d, index) => ({ ...acc, [d]: index }), {})\n);\nexport const getDay = day => DAYS[day];\nexport const ALL_DAYS_SELECTED = dayNamesEnglish.map(getDay);\n\n// Utils\nexport function makeUniqueIdGenerator(id = '', initialIndex = 0) {\n  let i = initialIndex;\n  return function() {\n    i += 1;\n    return `${id}_${i}`;\n  };\n}\n\nexport const getTodoHistory = async () => {\n  try {\n    localForage.setItem(DB_TODOS_HISTORY_KEY, {});\n    const store = await localForage.getItem(DB_TODOS_HISTORY_KEY);\n    if (!store) {\n      await localForage.setItem(DB_TODOS_HISTORY_KEY, {});\n      return {};\n    }\n    return store;\n  } catch (e) {}\n};\n\nexport function formatDate(date) {\n  const parsedDate = moment(date);\n  const year = parsedDate.year();\n  const month = parsedDate.month();\n  const day = parsedDate.date();\n  return `${month}-${day}-${year}`;\n}\n\nexport function useGlobalState() {\n  return useContext(Store);\n}\n\nexport const getTodos = async () => {\n  try {\n    const store = await localForage.getItem(DB_TODOS_KEY);\n    if (!store) {\n      await localForage.setItem(DB_TODOS_KEY, DEFAULT_TODOS);\n      return DEFAULT_TODOS;\n    }\n    return store;\n  } catch (e) {}\n};\n\nexport function useFilters(filters = {}) {\n  const [currentFilters, setFilters] = useState(filters);\n\n  const addFilter = name => setFilters([...currentFilters, name]);\n  const removeFilter = name =>\n    setFilters(currentFilters.filter(f => f !== name));\n  const isFilterActive = name => currentFilters.includes(name);\n  const toggleFilter = name =>\n    isFilterActive(name) ? removeFilter(name) : addFilter(name);\n\n  return {\n    filters,\n    currentFilters,\n    isFilterActive,\n    toggleFilter,\n    setFilters: filters => setFilters(Object.keys(filters)),\n  };\n}\n\nexport const generateTodayFilter = today => ({ days }) => {\n  return days.includes(today || new Date().getDay());\n};\n\nconst Day = 'Day';\n\n// export const filterMoreRecentTodos = ({ createdAt }) =>\nexport const requiredFilters = day => [];\nexport const getTodoFilters = ({ day } = {}) => ({\n  [Day]: generateTodayFilter(day),\n});\n\nexport function useTodoList(defaultTodos = [], day = moment()) {\n  const generateId = makeUniqueIdGenerator('todo', defaultTodos.length - 1);\n  const [todos, setTodos] = useState(defaultTodos);\n  const filters = getTodoFilters({ day: day.get('day') });\n  const { currentFilters, setFilters, ...filterProps } = useFilters(\n    Object.keys(filters)\n  );\n  const activeFilters = [\n    ...currentFilters.map(k => filters[k]),\n    ...requiredFilters(day),\n  ];\n\n  const filteredTodos = todos.filter(t => activeFilters.every(f => f(t)));\n\n  useEffect(\n    () => {\n      setFilters(getTodoFilters({ day: day.get('day') }));\n    },\n    [day]\n  );\n\n  useEffect(\n    () => {\n      localForage.setItem(DB_TODOS_KEY, todos);\n    },\n    [todos]\n  );\n\n  const addTodo = todo => {\n    const newTodos = [...todos, { id: generateId(), ...todo }];\n    setTodos(newTodos);\n  };\n\n  const toggleTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = !newTodos[index].isCompleted;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = todoId => {\n    setTodos(todos.filter(id => id !== todoId));\n  };\n\n  const updateTodo = newTodo => {\n    const newTodos = todos.map(todo => {\n      if (newTodo.id !== todo.id) return todo;\n      return { ...todo, ...newTodo };\n    });\n    setTodos(newTodos);\n  };\n\n  return {\n    todos: filteredTodos,\n    filteredTodos,\n    updateTodo,\n    removeTodo,\n    toggleTodo,\n    addTodo,\n    ...filterProps,\n  };\n}\n\nexport { useDayBrowser } from './useDayBrowser';\nexport { useTodoHistory } from './useTodoHistory';\n","import React, { useState } from 'react';\nimport {\n  DAYS,\n  ALL_DAYS_SELECTED,\n  getDay,\n  dayNamesEnglish,\n  everyDay,\n} from 'shared';\n\nexport const messages = {\n  allDaysLabel: 'All days of the week',\n};\n\nexport default function DayPicker({ defaultSelectedDays, onSetSelectedDays }) {\n  const [selectedDays, setSelectedDays] = useState(defaultSelectedDays);\n  const isDaySelected = day => selectedDays.includes(getDay(day));\n  const allDaysChecked = ALL_DAYS_SELECTED.every(day =>\n    selectedDays.includes(day)\n  );\n  function syncDays(nextDays) {\n    setSelectedDays(nextDays);\n    onSetSelectedDays(nextDays);\n  }\n  function toggleCheckDay({ target }) {\n    const day = DAYS[target.value];\n    let nextDays;\n    if (!isDaySelected(target.value)) {\n      nextDays = [...selectedDays, day];\n    } else {\n      nextDays = selectedDays.filter(d => d !== day);\n    }\n    syncDays(nextDays);\n  }\n  return (\n    <fieldset>\n      <legend>Day</legend>\n      <label>\n        <input\n          type=\"checkbox\"\n          value={everyDay}\n          checked={allDaysChecked}\n          onChange={() => syncDays(allDaysChecked ? [] : ALL_DAYS_SELECTED)}\n        />\n        {messages.allDaysLabel}\n      </label>\n      &nbsp;—&nbsp;\n      {dayNamesEnglish.map(day => (\n        <label key={day}>\n          <input\n            type=\"checkbox\"\n            value={day}\n            checked={isDaySelected(day)}\n            onChange={toggleCheckDay}\n          />\n          {day}\n        </label>\n      ))}\n    </fieldset>\n  );\n}\n","import React, { useState } from 'react';\nimport { ALL_DAYS_SELECTED } from 'shared';\nimport DayPicker from 'app/DayPicker';\nexport const TODO_PLACEHOLDER = 'Climb Mt Rainier';\n\nexport const messages = {\n  editLabel: 'Edit',\n  saveLabel: 'Save',\n  todoTextPlaceholder: 'Climb Mt Rainier',\n};\n\nexport default function TodoForm({ cancel, todo, save, defaultValue = '' }) {\n  const [value, setValue] = useState(defaultValue);\n  const [selectedDays, setSelectedDays] = useState(\n    todo ? todo.days : ALL_DAYS_SELECTED\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    save({\n      text: value,\n      days: selectedDays,\n    });\n    setValue('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Todo&nbsp;\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"input\"\n          placeholder={messages.todoTextPlaceholder}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n      </label>\n      {!!value && (\n        <DayPicker\n          defaultSelectedDays={selectedDays}\n          onSetSelectedDays={setSelectedDays}\n        />\n      )}\n      <button type=\"submit\">{messages.saveLabel}</button>\n      {!!defaultValue && <button onClick={cancel}>Cancel</button>}\n    </form>\n  );\n}\n","import React, { useState } from 'react';\nimport TodoForm from 'app/TodoForm';\n\nexport const messages = {\n  editLabel: 'Edit',\n  deleteLabel: 'Remove',\n};\n\nexport const generateAriaLabelForDeleteButton = ({ text }) =>\n  `${messages.deleteLabel} ${text}`;\n\nexport const todoAriaLabelPart1 = 'Mark';\nexport const todoAriaLabelPart2 = 'as completed';\nexport const generateAriaLabelForTodo = ({ text }) =>\n  `${todoAriaLabelPart1} ${text} ${todoAriaLabelPart2}`;\nexport const generateAriaLabelForEditTodoButton = ({ text }) => `Edit ${text}`;\n\nexport default function TodoListItem({\n  isCompleted,\n  todo,\n  toggleTodo,\n  removeTodo,\n  updateTodo,\n}) {\n  const [isEditing, setIsEditing] = useState(false);\n  const setEditing = () => setIsEditing(true);\n  const setNotEditing = () => setIsEditing(false);\n  if (isEditing) {\n    return (\n      <TodoForm\n        todo={todo}\n        save={update => {\n          updateTodo({\n            ...todo,\n            ...update,\n          });\n          setNotEditing();\n        }}\n        defaultValue={todo.text}\n        cancel={setNotEditing}\n      />\n    );\n  }\n  return (\n    <div\n      style={{\n        textDecoration: isCompleted ? 'line-through' : '',\n      }}\n    >\n      <input\n        aria-label={generateAriaLabelForTodo(todo)}\n        type=\"checkbox\"\n        checked={isCompleted}\n        onChange={toggleTodo}\n      />\n      {todo.text}\n\n      <div>\n        <button\n          aria-label={generateAriaLabelForEditTodoButton(todo)}\n          onClick={setEditing}\n        >\n          {messages.editLabel}\n        </button>\n        <button\n          aria-label={generateAriaLabelForDeleteButton(todo)}\n          onClick={() => removeTodo(todo)}\n        >\n          {messages.deleteLabel}\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useGlobalState, useDayBrowser } from 'shared';\n\nexport default function DayBrowser() {\n  const { state } = useGlobalState();\n  const { currentDay } = state;\n  const { goToNextDay, goToPreviousDay, goToToday } = useDayBrowser();\n  return (\n    <div>\n      <button onClick={goToPreviousDay}>Prev</button>\n      <button onClick={goToToday}>Today</button>\n      {currentDay.format('dddd, MMMM Do YYYY')}\n      <button onClick={goToNextDay}>Next</button>\n    </div>\n  );\n}\n","import moment from 'moment';\nimport { useGlobalState } from 'shared';\n\nexport function useDayBrowser(defaultDay = moment()) {\n  const { state, setState } = useGlobalState();\n  const { currentDay } = state;\n  const setDay = day => setState({ currentDay: day });\n  const goToNextDay = () => setDay(currentDay.add(1, 'day'));\n  const goToPreviousDay = () => setDay(currentDay.subtract(1, 'day'));\n  const goToToday = () => setDay(moment());\n  return {\n    goToNextDay,\n    goToPreviousDay,\n    goToToday,\n  };\n}\n","import React from 'react';\nimport TodoForm from 'app/TodoForm';\nimport TodoListItem from 'app/TodoListItem';\nimport { useTodoList, useTodoHistory } from 'shared';\nimport DayBrowser from 'app/DayBrowser';\nimport { useGlobalState } from 'shared';\n\nexport default function TodoList({\n  defaultTodos = [],\n  defaultHistory,\n  defaultDay,\n}) {\n  const { state } = useGlobalState();\n  const { currentDay } = state;\n  const {\n    todos,\n    filters,\n    toggleFilter,\n    isFilterActive,\n    addTodo,\n    removeTodo,\n    updateTodo,\n  } = useTodoList(defaultTodos, currentDay);\n  const { history, toggleTodoForDay, isCompletedForDay } = useTodoHistory(\n    defaultHistory\n  );\n  const isTodoCompleted = ({ id }) => isCompletedForDay(id, currentDay);\n\n  return (\n    <div>\n      <DayBrowser />\n      <pre>{JSON.stringify(history, null, 2)}</pre>\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n      <div>\n        Filters\n        {filters.map(name => (\n          <label key={name}>\n            {name}\n            <input\n              type=\"checkbox\"\n              checked={isFilterActive(name)}\n              onChange={() => toggleFilter(name)}\n            />\n          </label>\n        ))}\n        <ul>\n          {todos.map((todo, index) => (\n            <li key={index}>\n              <TodoListItem\n                index={index}\n                todo={todo}\n                isCompleted={isTodoCompleted(todo)}\n                toggleTodo={() => toggleTodoForDay(todo.id, currentDay)}\n                removeTodo={removeTodo}\n                updateTodo={updateTodo}\n              />\n            </li>\n          ))}\n          <li>\n            <TodoForm save={addTodo} />\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport localForage from 'localforage';\nimport { DB_TODOS_HISTORY_KEY, formatDate } from 'shared';\n\nexport function useTodoHistory(defaultHistory = {}) {\n  let lastHistory = defaultHistory;\n  const [history, setHistory] = useState(defaultHistory);\n\n  useEffect(() => {\n    if (!isEqual(lastHistory, history)) {\n      localForage.setItem(DB_TODOS_HISTORY_KEY, history);\n    }\n  });\n\n  const getDayHistory = date => history[date] || [];\n  const isCompletedForDay = (todoId, day) =>\n    getDayHistory(formatDate(day)).includes(todoId);\n\n  const toggleTodoForDay = (todoId, day) => {\n    const date = formatDate(day);\n    if (!date) return;\n    const existingDayHistory = getDayHistory(date);\n    const isCompletedForDay = existingDayHistory.includes(todoId);\n    const nextTodoHistory = isCompletedForDay\n      ? existingDayHistory.filter(t => t !== todoId)\n      : [...existingDayHistory, todoId];\n    const nextHistory = {\n      ...history,\n      [date]: nextTodoHistory,\n    };\n    lastHistory = nextHistory;\n    setHistory(nextHistory);\n  };\n\n  return {\n    history,\n    isCompletedForDay,\n    toggleTodoForDay,\n  };\n}\n","import React, { Suspense } from 'react';\nimport { getTodos, getTodoHistory } from 'shared';\nimport AppProviders from 'app/Providers';\nimport { unstable_createResource as createResource } from 'react-cache';\nimport TodoList from 'app/TodoList';\n\nconst todosResource = createResource(getTodos);\nconst todosHistoryResource = createResource(getTodoHistory);\n\nconst Fallback = () => <div>Loading...</div>;\n\nconst LiveTodoList = () => {\n  const todos = todosResource.read();\n  const history = todosHistoryResource.read();\n  return <TodoList defaultTodos={todos} defaultHistory={history} />;\n};\n\nexport default function App() {\n  return (\n    <AppProviders>\n      <Suspense fallback={<Fallback />}>\n        <LiveTodoList />\n      </Suspense>\n    </AppProviders>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}